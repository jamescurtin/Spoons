[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "CameraStatus:checkCameraStatus() -> Self",
        "desc": "Makes a one-time call to check camera state.",
        "doc": "Makes a one-time call to check camera state.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\nMakes an empty POST request to the \"cameraOnHook\" webhook if any camera is enabled.\nMakes an empty POST request to the \"cameraOffHook\" webhook if no camera is enabled.",
        "examples": [],
        "file": "Source/CameraStatus.spoon/init.lua",
        "lineno": "93",
        "name": "checkCameraStatus",
        "notes": [
          "Makes an empty POST request to the \"cameraOnHook\" webhook if any camera is enabled.",
          "Makes an empty POST request to the \"cameraOffHook\" webhook if no camera is enabled."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "CameraStatus:checkCameraStatus() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "CameraStatus:start() -> Self",
        "desc": "Enables the CameraStatus spoon.",
        "doc": "Enables the CameraStatus spoon.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\nThe spoon uses a camera watcher to poll for camera status.\nAdditionally, it will register cameras that are added after the spoon has\nbeen initialized.\nCalls the \"On\" webhook if any camera is enabled.\nCalls the \"Off\" webhook if no camera is enabled.",
        "examples": [],
        "file": "Source/CameraStatus.spoon/init.lua",
        "lineno": "123",
        "name": "start",
        "notes": [
          "The spoon uses a camera watcher to poll for camera status.",
          "Additionally, it will register cameras that are added after the spoon has",
          "been initialized.",
          "Calls the \"On\" webhook if any camera is enabled.",
          "Calls the \"Off\" webhook if no camera is enabled."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "CameraStatus:start() -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "CameraStatus.cameraOffHook (String)",
        "desc": "A webhook URL that will be used to trigger an event when an attached camera is turned off.",
        "doc": "A webhook URL that will be used to trigger an event when an attached camera is turned off.",
        "file": "Source/CameraStatus.spoon/init.lua",
        "lineno": "65",
        "name": "cameraOffHook",
        "signature": "CameraStatus.cameraOffHook (String)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "CameraStatus.cameraOnHook (String)",
        "desc": "A webhook URL that will be used to trigger an event when an attached camera is turned on.",
        "doc": "A webhook URL that will be used to trigger an event when an attached camera is turned on.",
        "file": "Source/CameraStatus.spoon/init.lua",
        "lineno": "60",
        "name": "cameraOnHook",
        "signature": "CameraStatus.cameraOnHook (String)",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Trigger webhooks to enable or disable a status light/monitor/etc. based on",
    "doc": "Trigger webhooks to enable or disable a status light/monitor/etc. based on\nthe computer's camera state.\n\nExample (assumes you are using `SpoonInstall` to load spoons):\n\n```\n-- This plugin requires two webhook URLs (e.g. from HomeAssistant) that will\n-- be triggered based on the computer's camera state.\n\nlocal statusONwebhook = \"https://some-webhook.url/on\"\nlocal statusOFFwebhook = \"https://some-webhook.url/off\"\n\nhs.loadSpoon(\"SpoonInstall\")\nSpoonInstall = spoon.SpoonInstall\nSpoonInstall.repos = {\n    default = {\n        url = \"https://github.com/Hammerspoon/Spoons\",\n        desc = \"Main Hammerspoon Spoon repository\",\n        branch = \"master\",\n    },\n    jamescurtin = {\n        url = \"https://github.com/jamescurtin/Spoons\",\n        desc = \"James Curtin's Spoons\",\n        branch = \"master\",\n    },\n}\n\nSpoonInstaller:andUse(\"CameraStatus\",\n  {\n      repo = \"jamescurtin\",\n      start = true,\n      config = {\n          cameraOnHook = statusONwebhook,\n          cameraOffHook = statusOFFwebhook,\n      }\n  }\n)\n```",
    "items": [
      {
        "def": "CameraStatus.cameraOffHook (String)",
        "desc": "A webhook URL that will be used to trigger an event when an attached camera is turned off.",
        "doc": "A webhook URL that will be used to trigger an event when an attached camera is turned off.",
        "file": "Source/CameraStatus.spoon/init.lua",
        "lineno": "65",
        "name": "cameraOffHook",
        "signature": "CameraStatus.cameraOffHook (String)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "CameraStatus.cameraOnHook (String)",
        "desc": "A webhook URL that will be used to trigger an event when an attached camera is turned on.",
        "doc": "A webhook URL that will be used to trigger an event when an attached camera is turned on.",
        "file": "Source/CameraStatus.spoon/init.lua",
        "lineno": "60",
        "name": "cameraOnHook",
        "signature": "CameraStatus.cameraOnHook (String)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "CameraStatus:checkCameraStatus() -> Self",
        "desc": "Makes a one-time call to check camera state.",
        "doc": "Makes a one-time call to check camera state.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\nMakes an empty POST request to the \"cameraOnHook\" webhook if any camera is enabled.\nMakes an empty POST request to the \"cameraOffHook\" webhook if no camera is enabled.",
        "examples": [],
        "file": "Source/CameraStatus.spoon/init.lua",
        "lineno": "93",
        "name": "checkCameraStatus",
        "notes": [
          "Makes an empty POST request to the \"cameraOnHook\" webhook if any camera is enabled.",
          "Makes an empty POST request to the \"cameraOffHook\" webhook if no camera is enabled."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "CameraStatus:checkCameraStatus() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "CameraStatus:start() -> Self",
        "desc": "Enables the CameraStatus spoon.",
        "doc": "Enables the CameraStatus spoon.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\nThe spoon uses a camera watcher to poll for camera status.\nAdditionally, it will register cameras that are added after the spoon has\nbeen initialized.\nCalls the \"On\" webhook if any camera is enabled.\nCalls the \"Off\" webhook if no camera is enabled.",
        "examples": [],
        "file": "Source/CameraStatus.spoon/init.lua",
        "lineno": "123",
        "name": "start",
        "notes": [
          "The spoon uses a camera watcher to poll for camera status.",
          "Additionally, it will register cameras that are added after the spoon has",
          "been initialized.",
          "Calls the \"On\" webhook if any camera is enabled.",
          "Calls the \"Off\" webhook if no camera is enabled."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "CameraStatus:start() -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "CameraStatus",
    "stripped_doc": "the computer's camera state.\n\nExample (assumes you are using `SpoonInstall` to load spoons):\n\n```\n-- This plugin requires two webhook URLs (e.g. from HomeAssistant) that will\n-- be triggered based on the computer's camera state.\n\nlocal statusONwebhook = \"https://some-webhook.url/on\"\nlocal statusOFFwebhook = \"https://some-webhook.url/off\"\n\nhs.loadSpoon(\"SpoonInstall\")\nSpoonInstall = spoon.SpoonInstall\nSpoonInstall.repos = {\n    default = {\n        url = \"https://github.com/Hammerspoon/Spoons\",\n        desc = \"Main Hammerspoon Spoon repository\",\n        branch = \"master\",\n    },\n    jamescurtin = {\n        url = \"https://github.com/jamescurtin/Spoons\",\n        desc = \"James Curtin's Spoons\",\n        branch = \"master\",\n    },\n}\n\nSpoonInstaller:andUse(\"CameraStatus\",\n  {\n      repo = \"jamescurtin\",\n      start = true,\n      config = {\n          cameraOnHook = statusONwebhook,\n          cameraOffHook = statusOFFwebhook,\n      }\n  }\n)\n```",
    "submodules": [],
    "type": "Module"
  }
]